plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "org.jetbrains.kotlin.kapt"
    id "kotlin-kapt"
    id 'jacoco'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.30'
    id 'kotlin-android-extensions'
}

apply plugin: 'jacoco'
apply plugin: 'com.google.ar.sceneform.plugin'
apply plugin: 'com.apollographql.apollo'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.xpyx.nokiahslvisualisation"
        minSdkVersion 29
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        buildConfigField("String", "HERE_MAPS_API_KEY", getApiKey())
        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
                arg("room.incremental", "true")
                arg("room.expandProjection", "true")
            }
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    buildTypes {
        debug {
            resValue("string", "here_maps_api_key", getApiKey())
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']

    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

}

String getApiKey() {
    def propFile = rootProject.file("./local.properties")
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(propFile))
    return localProperties['HERE_MAPS_API_KEY']
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.3'
    implementation 'androidx.preference:preference:1.1.1'

    implementation 'com.google.android.material:material:1.4.0-alpha02'
    implementation 'com.google.android.gms:play-services-location:18.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // AAChartModel
    implementation 'com.github.AAChartModel:AAChartCore-Kotlin:-SNAPSHOT'


    //AR
    implementation 'com.google.ar:core:1.23.0'
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.17.1'
    implementation 'com.google.ar.sceneform:core:1.17.1'
    implementation "com.google.ar.sceneform:animation:1.17.1"
    implementation 'com.google.ar.sceneform:assets:1.17.1'

    // Glide - An image loading and caching library for Android
    // https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'

    //location library
    implementation 'com.github.appoly:ARCore-Location:1.2'

    // Recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.2.0'

    // OSMDroid
    implementation 'org.osmdroid:osmdroid-android:6.1.10'
    implementation "androidx.preference:preference-ktx:1.1.1"

    // Mapbox
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.6.1'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:0.11.0'
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-markerview-v9:0.4.0'

    // Apollo
    implementation 'com.apollographql.apollo:apollo-runtime:2.5.5'
    implementation 'com.apollographql.apollo:apollo-coroutines-support:2.5.5'

    // Apollo RxJava3 support
    implementation "com.apollographql.apollo:apollo-rx3-support:2.5.5"

    // RxJava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.7'

    // Kotlin
    def nav_version = "2.3.4"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Paho MQTT client
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    // Retrofit
    final retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    // Viewmodel + Livedata
    final lifecycle_version = '2.3.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Room DB
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'


}

// Files with such regex patterns are to be excluded
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                      '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

// Location of generated output classes
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilter)

// Source code directory
    def mainSrc = "$project.projectDir/src/main/java"


// Task declaration
    task jacocoTestReport(type: JacocoReport) {
        // Runs only after the dependencies are executed
        dependsOn = ['testDebugUnitTest', 'createDebugCoverageReport']
        // Export formats
        reports {
            xml.enabled = true
            html.enabled = true
        }

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree]))

        // Inform Gradle where the files generated by test cases - are located
        executionData.from = fileTree(dir: project.buildDir, includes: [
                'jacoco/testDebugUnitTest.exec',
                'outputs/code_coverage/debugAndroidTest/connected/*.ec'
        ])
    }
